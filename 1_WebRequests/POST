
~~~ POST ~~~
POST requests allow web apps to transfer files or move user params from the URL
GET places user params within URL
POST places user params within the HTTP Request body which as 3 benefits:
1. lack of logging - inefficient to log all files given many may be large
2. less encoding required - URLs must conform to characters, while binary data can be placed directly in the Request body
3. more data can be sent - URL length should be kept below 2000, and so they cannot handle a lot of data


~~~ Login Forms ~~~

POST request data being sent would look something like:
	username=admin&password=admin

-X: flag specifies type of request
-d: flag adds the POST data

curl -X POST -d 'username=admin&password=admin' 83.136.249.46:37504/ -vvv
successfully authenticates and returns cookie in the Set-Cookie header

* -L: Follows redirection with cURL, in case a login form sends us to a different page, such as a dashboard *

~~~ Authenticated Cookies ~~~

-b: Flag for when using Cookie as authentication
curl -X POST -b 'PHPSESSID=6tike83f0po7er4d7hpa7sqqh4' 83.136.249.46:37504/ -vvv

You could also just specify -H 'Cookie: PHPSESSID=6tike83f0po7er4d7hpa7sqqh4'


To view stored cookies, we can simply go to Storage tab on DevTools and search for Cookie in left sidebar


Having a valid cookie may be enough to get authenticated into many web applications (common attack XSS)


~~~ JSON Data ~~~
You can find requests headers by doing Copy>Copy Request Headers

With a valid cookie, we could also bypass the login/frontend directy using a command as such:
curl -X POST -d '{"search":"london"}' -b 'PHPSESSID=8j0uk67ro1hsblmb5k1fm4fq9e' -H 'Content-Type: application/json' 83.136.249.46:37504/search.php

	We know to do {"search":"london"} after examining the raw request payload of using the interactive search




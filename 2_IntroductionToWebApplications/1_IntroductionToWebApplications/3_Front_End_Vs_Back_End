
~~~ Front End ~~~
contains user's components directly through the web browser (client-side)
HTML, CSS, and JavaScript is interpreted in real-time by our browsers

Front end components should adapt to any screen size and work with any browser (optimized), which
	differs from back end components that are specific to a platform or operating system

In addition to code development, UI, UX, and visual web design are other front end components


~~~ Back End ~~~
drives all core web app functionalities executed at the back end server
(A website is just a collection of static web pages without a back end)

4 main components:
Back end servers - hardware/os hosting all components, usually run on Linux, Windows, or using containers
Web Servers - handl HTTP requests and connections. Ex. Apache, NGINX, IIS
Databases - store and retrieve web app data. Ex. MySQL, PostgreSQL, MongoDB
Development frameworks - used to develop the core web app. Ex. Django (Python), Express (NodeJS JavaScript)


Docker allows hosting each back end component on its own isolated server (container)
	- This separation/segmentation isolates each part from potential vulnerabilities


~~~ Securing Front/Back End ~~~

Even without access to back end code, an injection attack, for ex., could exploit a vulnerability found
	on the back end

Top 20 most common web developer mistakes:

No. 	Mistake
1. 	Permitting Invalid Data to Enter the Database
2. 	Focusing on the System as a Whole
3. 	Establishing Personally Developed Security Methods
4. 	Treating Security to be Your Last Step
5. 	Developing Plain Text Password Storage
6. 	Creating Weak Passwords
7. 	Storing Unencrypted Data in the Database
8. 	Depending Excessively on the Client Side
9. 	Being Too Optimistic
10. 	Permitting Variables via the URL Path Name
11. 	Trusting third-party code
12. 	Hard-coding backdoor accounts
13. 	Unverified SQL injections
14. 	Remote file inclusions
15. 	Insecure data handling
16. 	Failing to encrypt data properly
17. 	Not using a secure cryptographic system
18. 	Ignoring layer 8
19. 	Review user actions
20. 	Web Application Firewall misconfigurations

These mistakes lead to the OWASP Top 10 vulnerabilities for web applications, which we will discuss in other modules:
No. 	Vulnerability
1. 	Broken Access Control
2. 	Cryptographic Failures
3. 	Injection
4. 	Insecure Design
5. 	Security Misconfiguration
6. 	Vulnerable and Outdated Components
7. 	Identification and Authentication Failures
8. 	Software and Data Integrity Failures
9. 	Security Logging and Monitoring Failures
10. 	Server-Side Request Forgery (SSRF)
